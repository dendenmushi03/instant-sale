<!doctype html>
<html lang="ja">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Upload | Instant Sale</title>

<link rel="stylesheet" href="/public/style.css?v=<%= assetVer %>" />
<link rel="icon" href="/public/logo.png?v=<%= assetVer %>" />

  <style>
  .setup{display:grid;gap:12px;margin:12px 0}
  .setup__item{display:flex;align-items:center;gap:12px;padding:12px;border:1px solid var(--border);border-radius:10px;background:var(--surface)}
  .setup__status{font-size:20px;min-width:24px;text-align:center}
  .setup__body{flex:1}
  .setup__title{font-weight:700}
  .setup__desc{opacity:.85;font-size:.95em}
</style>

</head>

<body class="layout">

<header class="nav">
  <a class="nav__brand" href="/">
    <img class="nav__logo" src="/public/logo.png" alt="Instant Sale" width="28" height="28" loading="eager" decoding="async" />
    <span class="nav__brandText">Instant Sale</span>
  </a>
  <nav class="nav__right">
    <% if (me) { %>
      <span class="nav__user"><%= me.name || me.email %></span>
      <form method="post" action="/logout" class="inline">
        <button class="btn btn--ghost">ログアウト</button>
      </form>
    <% } else { %>
      <a class="btn btn--ghost" href="/auth/google">Googleでログイン</a>
    <% } %>
  </nav>
</header>
  
  <main class="container">

<h1>即販売リンクを作る</h1>

<% const connectReady =
     (typeof connect !== 'undefined') && !!(connect.hasAccount && connect.payoutsEnabled); %>

<% if (connectReady) { %>
  <div class="alert alert--success alert--prominent alert--with-icon"
       role="status" aria-live="polite" style="margin-top:12px;">
    <span class="alert__icon" aria-hidden="true">✅</span>
    <div class="alert__text">
      <strong class="alert__title">受取設定は完了しています</strong>
      <span class="alert__desc">売上の受け取りが可能です。必要に応じて下のボタンから設定を確認・更新できます。</span>
    </div>
  </div>
<% } %>

<% if (!connectReady) { %>

  <div class="alert alert--error alert--prominent alert--with-icon alert--with-cta"
     role="alert" aria-live="assertive" style="margin-top:12px;">
  <span class="alert__icon" aria-hidden="true">⚠️</span>
  <div class="alert__text">
    <strong class="alert__title">受取設定が未完了です</strong>
    <span class="alert__desc">売上の受け取りには、振込口座の登録（Stripe）と本人確認が必要です。</span>
  </div>
  <a class="btn btn--primary btn--compact" href="/connect/onboard">はじめる（Stripe）</a>
</div>

  <% } %>

<section class="setup">
  <div class="connectRow">
    <div class="connectRow__left">

<div class="connectRow__head">
  <% if (connectReady) { %>
    <span class="chip chip--ok chip--lg" aria-live="polite">
      <span class="chip__icon" aria-hidden="true">✔</span> 受取設定 OK
    </span>
  <% } else { %>
    <span class="chip chip--warn chip--lg" aria-live="polite">
      <span class="chip__icon" aria-hidden="true">!</span> 受取設定が未完了
    </span>
  <% } %>
  <h3 class="connectRow__title">Stripe 受取設定</h3>
</div>

      <p class="connectRow__desc">
        売上の入金先口座と本人確認を <strong>Stripe</strong> で設定します。
        <%= connectReady ? '内容の確認・変更ができます。' : '未設定のままでは売上の受け取りができません。' %>
      </p>
    </div>

<% if (connectReady) { %>
  <a class="btn btn--primary btn--lg" href="/connect/onboard" aria-label="Stripeで受取設定を確認・更新する">
    確認 / 更新（Stripe）
  </a>
<% } %>

  </div>

  <% if (!connectReady) { %>
    <div class="hintBox" role="note">
      本人確認書類（免許証 など）と、受取用の銀行口座が必要です。所要 5–10 分程度。
    </div>
  <% } %>

</section>
   
    <form class="card" action="/upload" method="post" enctype="multipart/form-data">
      <label>タイトル
        <input type="text" name="title" placeholder="作品タイトル" required />
      </label>
      
<div class="row">
  <label style="flex:1">価格（円）

<input type="number" name="price"
       min="<%= process.env.MIN_PRICE || 100 %>"
       step="1"
       value="<%= process.env.MIN_PRICE || 100 %>"
       required />

  </label>

<label style="flex:1">通貨
  <input type="text" value="円" disabled aria-disabled="true" />
  <input type="hidden" name="currency" value="jpy" />
</label>

</div>

      <label>クリエイター名（任意）
        <input type="text" name="creatorName" placeholder="表示用の名前（任意）" />
      </label>
      <label>画像（高解像度ファイル）
        <input type="file" name="image" accept="image/*" required />
      </label>
      <label>
  <input type="checkbox" name="attestOwner" required />
  私はこの画像の権利者（または正当に販売可能な権利保有者）です
</label>
<button type="submit" class="btn btn--primary">販売ページを作成</button>
</form>

  </main>

<footer class="site-footer">
  <div class="footer__links">
    <a href="/terms">利用規約</a>
    <span class="dot">•</span>
    <a href="/privacy">プライバシーポリシー</a>
    <span class="dot">•</span>
    <a href="/tokushoho">特定商取引法に基づく表記</a>
  </div>
  <div class="footer__copy">© <%= new Date().getFullYear() %> Instant Sale</div>
</footer>

<!-- 作成中モーダル（共通クラス版：スマホでも確実に全画面） -->
<div id="progressModal" class="modal" aria-hidden="true">
  <div class="modal__panel" role="dialog" aria-modal="true" aria-labelledby="progressTitle">
    <h3 id="progressTitle" style="margin:0 0 8px;font-size:18px;">販売ページを作成しています…</h3>
    <p id="progressPhase" style="margin:0 0 12px;opacity:.9">アップロード中</p>

    <div class="progress">
      <div id="progressBar" class="progress__bar"></div>
    </div>
    <p id="progressPct" class="progress__pct">0%</p>

    <!-- 完了エリア -->
    <div id="resultInModal" style="display:none;margin-top:14px;">
      <div style="font-weight:700;margin:0 0 8px;">販売ページができました！</div>
      <input id="resultUrlInModal" type="text" readonly
             style="width:100%;background:#0b2015;border:1px solid #2d6a3f;border-radius:8px;padding:10px;color:#c9fdd7;">
      <div style="display:flex;gap:8px;margin-top:10px;flex-wrap:wrap;">
        <button type="button" id="copyResultUrl" class="btn">URLをコピー</button>
        <a id="openResultUrl" class="btn btn--primary" href="#" target="_blank" rel="noopener">販売ページを開く</a>
        <button type="button" id="closeModal" class="btn btn--ghost">閉じる</button>
      </div>
      <p style="margin:10px 0 0;">このURLをX/Instagramに貼ると、OGP付きで見栄えよく表示されます。</p>
    </div>
  </div>
</div>

<script nonce="<%= cspNonce %>">
(function() {
  const form = document.querySelector('form[action="/upload"]');
  if (!form) return;

  form.addEventListener('submit', function (ev) {
    // ★ 先にネイティブバリデーションを実行。NGなら送信しない
    if (!form.reportValidity()) {
      return; // ブラウザがどの項目かハイライトしてくれる
    }

    ev.preventDefault(); // ← バリデーション通過後に抑止

    const modal = document.getElementById('progressModal');
    const bar   = document.getElementById('progressBar');
    const pct   = document.getElementById('progressPct');
    const phase = document.getElementById('progressPhase');

const resultBox = document.getElementById('ajaxResultBox');      // あってもなくてもOK
// const resultUrl = document.getElementById('ajaxResultUrl');   // 未使用なら削除でOK

if (!modal || !bar || !pct || !phase) {
  form.submit(); // モーダル要素が無いときだけフォールバック
  return;
}

if (resultBox) resultBox.style.display = 'none';
bar.style.width = '0%';
    pct.textContent = '0%';
    phase.textContent = 'アップロード中';

modal.style.display = 'flex';
document.body.classList.add('modal-open');   // ← 追加（スマホで背景を止める）

    // ★ 追加：二重送信防止（送信ボタンの無効化と文言変更）
    const submitBtn = form.querySelector('button[type="submit"]');
    if (submitBtn && !submitBtn.disabled) {
      submitBtn.dataset.origText = submitBtn.textContent || '';
      submitBtn.disabled = true;
      submitBtn.textContent = '作成中…';
    }

    const fd = new FormData(form);
    const xhr = new XMLHttpRequest();
    xhr.open('POST', form.action);
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

    xhr.upload.onprogress = function (e) {
      if (!e.lengthComputable) return;
      const p = Math.min(70, Math.floor((e.loaded / e.total) * 70));
      bar.style.width = p + '%';
      pct.textContent = p + '%';
    };

    xhr.upload.onload = function () {
      phase.textContent = '画像処理・サムネ生成中';
      let v = parseInt(bar.style.width) || 70;
      const timer = setInterval(() => {
        if (v >= 95) return clearInterval(timer);
        v += 1;
        bar.style.width = v + '%';
        pct.textContent = v + '%';
      }, 120);
    };

    xhr.onreadystatechange = function () {
      if (xhr.readyState !== 4) return;

      // ★ JSON以外が返ってきた（認証リダイレクト/エラーページ）場合も安全に処理
      let res = {};
      try { res = JSON.parse(xhr.responseText || '{}'); } catch (_) { res = {}; }

      if (xhr.status >= 200 && xhr.status < 300 && res.ok && res.createdUrl) {
        phase.textContent = '完了';
        bar.style.width = '100%';
        pct.textContent = '100%';

setTimeout(() => {
  // モーダルは開いたまま、完了表示に切替
  phase.textContent = '完了';
  bar.style.width = '100%';
  pct.textContent = '100%';

if (resultBox) resultBox.style.display = 'none';

  // ★ モーダル内に結果を表示
  const resultWrap = document.getElementById('resultInModal');
  const resultInput = document.getElementById('resultUrlInModal');
  const openBtn = document.getElementById('openResultUrl');
  const closeBtn = document.getElementById('closeModal');
  const copyBtn  = document.getElementById('copyResultUrl');

  if (resultWrap && resultInput && openBtn) {
    resultInput.value = res.createdUrl;
    openBtn.href = res.createdUrl;
    resultWrap.style.display = 'block';

    // コピーボタン（毎回多重にイベントが付かないよう一旦初期化）
    if (copyBtn) {
      copyBtn.onclick = null;
      copyBtn.onclick = async () => {
        try {
          await navigator.clipboard.writeText(res.createdUrl);
          copyBtn.textContent = 'コピーしました';
          setTimeout(() => (copyBtn.textContent = 'URLをコピー'), 1200);
        } catch (_) {
          resultInput.select();
          document.execCommand('copy');
        }
      };
    }

    // 閉じる → モーダル閉じてフォームだけ初期化
    if (closeBtn) {
closeBtn.onclick = () => {
  modal.style.display = 'none';
  document.body.classList.remove('modal-open'); // 背景ロック解除
  resultWrap.style.display = 'none';
};
    }
  }

  // フォームの軽いリセット
  const file = form.querySelector('input[type="file"]');
  if (file) file.value = '';
  const chk = form.querySelector('input[type="checkbox"]');
  if (chk) chk.checked = false;

  // 送信ボタンを復帰
  const submitBtn = form.querySelector('button[type="submit"]');
  if (submitBtn) {
    submitBtn.disabled = false;
    submitBtn.textContent = submitBtn.dataset.origText || '販売ページを作成';
  }
}, 350);

} else {
  modal.style.display = 'none';
  document.body.classList.remove('modal-open'); // 背景ロック解除

        // ★ 追加：ボタンを復帰
        (function restoreBtn() {
          const submitBtn = form.querySelector('button[type="submit"]');
          if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = submitBtn.dataset.origText || '販売ページを作成';
          }
        })();

        // 認証が切れていたときはアップロードページに戻す
        if (xhr.status === 401 || /login/i.test(xhr.responseText || '')) {
          alert('ログインが必要です。ログインページへ移動します。');
          location.href = '/login';
          return;
        }
        alert((res && res.message) || 'アップロードに失敗しました。しばらくして再度お試しください。');

      }
    };

xhr.onerror = function () {
  modal.style.display = 'none';
  document.body.classList.remove('modal-open'); // 背景ロック解除

  // ★ 追加：ボタンを復帰
  const submitBtn = form.querySelector('button[type="submit"]');
  if (submitBtn) {
    submitBtn.disabled = false;
    submitBtn.textContent = submitBtn.dataset.origText || '販売ページを作成';
  }

  alert('ネットワークエラーが発生しました。通信環境をご確認ください。');
};

    xhr.send(fd);
  });
})();
</script>

</body>
</html>
